

 备忘录模式（Memento Pattern）又叫做快照模式（Snapshot Pattern） 保存一个对象的[某个状态]，以便在适当的时候[恢复对象]。备忘录模式属于行为型模式。

 意图：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。


 应用实例： 1、后悔药。 2、打游戏时的存档。 3、Windows 里的 ctri + z。 4、IE 中的后退。 4、数据库的事务管理。

 优点：
 1、给用户提供了一种[可以恢复]状态的机制，可以使用户能够比较方便地[恢复]到某个历史的状态。
 2、实现了信息的封装，使得用户[不需要关心状态的保存细节]。

 缺点：[消耗资源]。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。

 使用场景：
 1、需要保存/恢复数据的相关状态场景。
 2、提供一个可回滚的操作。

 涉及角色：
 1.Originator(发起人)：负责创建一个备忘录Memento，用以记录当前时刻自身的内部状态，并可使用备忘录恢复内部状态。发起人可以根据需要决定Memento存储自己的哪些内部状态。
 2.Memento(备忘录)：负责存储[发起人对象]的内部状态，并可以防止发起人以外的其他对象访问备忘录。备忘录有两个接口：Caretaker只能看到备忘录的窄接口，他只能将备忘录传递给其他对象。[发起人]却可看到备忘录的宽接口，允许它访问返回到先前状态所需要的所有数据。
 3.Caretaker(管理者):管理备忘录，自身不能对[备忘录]的内容进行访问或者操作。














