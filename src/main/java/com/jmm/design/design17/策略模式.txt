
定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。

在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。

策略模式角色：
    环境类(Context):用来操作策略的上下文环境;
    抽象策略类(Strategy):策略的抽象，出行方式的抽象
    具体策略类(ConcreteStrategy):具体的策略实现，每一种出行方式的具体实现。


就拿吃饭这件事儿简单举例：中国人吃饭大多用筷子，外国人大多有刀叉，及其少数人吃饭直接用手
同样是吃饭却有着不同的方式；


优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。

缺点： 1、策略类会增多。 2、所有策略类都需要对外暴露。

