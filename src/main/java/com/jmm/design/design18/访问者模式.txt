

访问者（Visitor）模式的定义：
    将作用于某种数据结构中的各[元素的操作]分离出来[封装成独立的类]，
    使其在[不改变数据结构]的前提下可以[添加作用于这些元素的新的操作]，为数据结构中的每个元素提供多种访问方式。
    它将对数据的操作与数据结构进行分离，是行为类模式中最复杂的一种模式。


访问者模式包含以下主要角色。
    抽象访问者(Visitor)-[访客]角色：定义一个访问具体元素的接口，为每个具体元素类对应一个访问操作 visit() ，该操作中的参数类型标识了被访问的具体元素。
    抽象元素(Element)-[东家]角色：声明一个包含接受操作 accept() 的接口，被接受的访问者对象作为 accept() 方法的参数。
    具体访问者(ConcreteVisitor)-[访客]角色：实现抽象访问者角色中声明的各个访问操作，确定访问者访问一个元素时该做什么。
    具体元素(ConcreteElement)-[东家]角色：实现抽象元素角色提供的 accept() 操作，其方法体通常都是 visitor.visit(this) ，另外具体元素中可能还包含本身业务逻辑的相关操作。
    对象结构(Object Structure)-[存放多个东家-可迭代(访客为入参)]角色：是一个包含元素角色的容器，提供让访问者对象遍历容器中的所有元素的方法，通常由 List、Set、Map 等聚合类实现。

简单举例：一个公司的员工上班期间不能穿拖鞋，但是回到家可以；在这里公司、家都是两个不容易变动的部门，员工作为一个访客在不同的环境下有不同的行为；


访问者（Visitor）模式是一种对象行为型模式，其主要[优点]如下。
    扩展性好。能够在不修改对象结构中的元素的情况下，为对象结构中的元素添加新的功能。
    复用性好。可以通过访问者来定义整个对象结构通用的功能，从而提高系统的复用程度。
    灵活性好。访问者模式将数据结构与作用于结构上的操作解耦，使得操作集合可相对自由地演化而不影响系统的数据结构。
    符合单一职责原则。访问者模式把相关的行为封装在一起，构成一个访问者，使每一个访问者的功能都比较单一。

访问者（Visitor）模式的主要[缺点]如下。
    增加新的元素类很困难。在访问者模式中，每增加一个新的元素类，都要在每一个具体访问者类中增加相应的具体操作，这违背了“开闭原则”。
    破坏封装。访问者模式中具体元素对访问者公布细节，这破坏了对象的封装性。
    违反了依赖倒置原则。访问者模式依赖了具体类，而没有依赖抽象类。










